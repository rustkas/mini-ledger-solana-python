"""
–≠—Ç–æ —É—á–µ–±–Ω–∞—è –º–∏–Ω–∏‚Äë—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ¬´—Å–æ–ª–∞–Ω–æ‚Äë–ø–æ–¥–æ–±–Ω–æ–≥–æ¬ª –ª–µ–¥–∂–µ—Ä–∞ –Ω–∞ Python + FastAPI. –û–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ Solana –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –Ω–∞–±–æ—Ä–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤:

PoH (Proof of History) –∫–∞–∫ –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–µ sha256‚Äë¬´—Ç–∏–∫–∏¬ª, —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –≤ Entry –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º—ã–µ –≤ Slot.
Leader‚Äë—Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PoH, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –±—É—Ñ–µ—Ä–∏–∑—É–µ—Ç –∏—Ö –≤ entries –∏ –≤—ã–¥–∞—ë—Ç –∂—É—Ä–Ω–∞–ª /ledger.
Validator‚Äë—Ä–µ–∂–∏–º: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á—É–∂–∏–µ —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ /ingest, –ø–µ—Ä–µ‚Äë—Å—á–∏—Ç–≤–∞–µ—Ç PoH, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –∏ replay‚Äô–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–Ω–∫, —Å—Ö–æ–¥—è—Å—å —Å–æ —Å—Ç–µ–π—Ç–æ–º –ª–∏–¥–µ—Ä–∞.
Anti‚Äëreplay –ø–æ –ø–æ–¥–ø–∏—Å–∏ –∏ –æ–∫–Ω–æ recent_hash –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç ¬´—É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö¬ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.

–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è TDD/–¥–µ–º–æ/—É—á—ë–±—ã, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫ —Å–∫–µ–ª–µ—Ç –º–∏–Ω–∏‚Äë–ø–µ—Å–æ—á–Ω–∏—Ü—ã –ø–æ –º–æ—Ç–∏–≤–∞–º –¥–∏–∑–∞–π–Ω–∞ Solana.

–ó–∞—á–µ–º —ç—Ç–æ

–ü–æ—â—É–ø–∞—Ç—å —Ä—É–∫–∞–º–∏: –∫–∞–∫ PoH –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ –¥–∞–Ω–Ω—ã–µ, –∞ –¥–∞–Ω–Ω—ã–µ ‚Äî –≤ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –∂—É—Ä–Ω–∞–ª.
–£–≤–∏–¥–µ—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: –ª–∏–¥–µ—Ä –ø–∏—à–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–µ–∑ –¥–æ–≤–µ—Ä–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É.
–ü–æ–Ω—è—Ç—å –¥–≤–µ –≤–∞–∂–Ω—ã–µ –∑–∞—â–∏—Ç—ã –Ω–∞ ¬´–≤—Ö–æ–¥–µ¬ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: —Å–≤–µ–∂–µ—Å—Ç—å recent_hash –∏ –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∏ (anti‚Äëreplay).

Install & run:
  pip install "fastapi[standard]" orjson pynacl httpx pytest anyio
  # Leader
  LEDGER_ROLE=leader fastapi dev main.py
  # Validator
  LEDGER_ROLE=validator fastapi dev main.py --port 8001
Test:
    make test

API (leader):
  GET  /health | /poh | /bank | /ledger
  POST /airdrop {"pubkey":"<hex32_ed25519>","amount":1000}
  POST /transfer {"from":"<hex>","to":"<hex>","amount":5,"recent_hash":"<hex>","sig":"<hex64>"}

API (validator):
  GET  /health | /poh | /bank | /ledger   (state after replay)
  POST /ingest {"slots":[ SlotOut... ]}  (apply & verify)

Notes:
- Account id == Ed25519 **public key (hex)**. No separate registry.
- `recent_hash` should be taken from `/poh.hash` shortly before signing.

1. Entries

Entry ‚Äî —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ¬´–∫—É—Å–æ—á–µ–∫ –≤—Ä–µ–º–µ–Ω–∏¬ª –≤ Solana.
–í –Ω—ë–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:

num_hashes ‚Äî —Å–∫–æ–ª—å–∫–æ ¬´—Ç–∏–∫–æ–≤¬ª (sha256 —à–∞–≥–æ–≤) PoH –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ;

hash ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–∏–∫–∞;

transactions[] ‚Äî —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª.

üëâ –ü–æ —Å—É—Ç–∏, Entry ‚Äî —ç—Ç–æ –∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ + –¥–∞–Ω–Ω—ã–µ.

–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:

–ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø–∞–∫–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫;

–∫–∞–∂–¥—ã–π Entry –ø–æ–¥–ø–∏—Å–∞–Ω –≤—Ä–µ–º–µ–Ω–µ–º (PoH-—Ö–µ—à–µ–º), –ø–æ—ç—Ç–æ–º—É –Ω–µ–ª—å–∑—è –ø–æ–¥–¥–µ–ª–∞—Ç—å –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —á—É–∂—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ¬´–Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏¬ª.

üîπ 2. Slots

Slot ‚Äî —ç—Ç–æ ¬´—ç–ø–æ—Ö–∞ –ª–∏–¥–µ—Ä–∞¬ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ—Ä–Ω–æ 400 –º—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–π Solana.
–õ–∏–¥–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ Entry –ø–æ–¥—Ä—è–¥, –ø–æ–∫–∞ –µ–≥–æ ¬´–æ—á–µ—Ä–µ–¥—å —Å–ª–æ—Ç–∞¬ª –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.

–í –Ω–∞—à–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–∏:

Slot = –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞—Å—Å–∏–≤–∞ Entries;

—É –Ω–µ–≥–æ –µ—Å—Ç—å slot_id, started_ms (–≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞), entries[].

–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —Å–ª–æ—Ç:

–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–∞;

–≤ –±–ª–æ–∫—á–µ–π–Ω–µ —Å–ª–æ—Ç –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ ¬´–±–ª–æ–∫¬ª, –Ω–æ —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–≤ Solana –±–ª–æ–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ —Å–ª–æ—Ç–æ–≤ –ø–∞—á–∫–∞–º–∏).

üîπ 3. Ledger

Ledger ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ (–∏ –≤–Ω—É—Ç—Ä–∏ ‚Äî entries).
–ü–æ —Å—É—Ç–∏, —ç—Ç–æ –∞–Ω–∞–ª–æ–≥ ¬´–±–ª–æ–∫—á–µ–π–Ω–∞¬ª –≤ Solana.

–õ–∏–¥–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Slots ‚Üí —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏—Ö –≤ Ledger;

Ledger –º–æ–∂–Ω–æ ¬´–æ—Ç–¥–∞—Ç—å¬ª –¥—Ä—É–≥–∏–º —É–∑–ª–∞–º, —á—Ç–æ–±—ã –æ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏—é.

–í –Ω–∞—à–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–∏ /ledger –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–≤–∞—Ç—å JSON-–º–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤.

üîπ 4. Replay (–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—Å–∫–∏–π —Ä–µ–∂–∏–º)

Replay (–∏–ª–∏ ¬´Replaying the ledger¬ª) ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–≥–¥–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ª–∏–¥–µ—Ä–∞ —Å–ª–æ—Ç—ã/entries –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç (–ø—Ä–∏–º–µ–Ω—è–µ—Ç) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–≤–æ—ë–º Bank.

–ü–æ—á–µ–º—É —ç—Ç–æ –Ω—É–∂–Ω–æ:

—É–∑–ª—ã –Ω–µ –¥–æ–≤–µ—Ä—è—é—Ç –ª–∏–¥–µ—Ä—É ¬´–Ω–∞ —Å–ª–æ–≤–æ¬ª;

–æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ PoH –≤ entries –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–∫–∞–∂–¥—ã–π hash = sha256 –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ);

–∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π;

–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç –∏—Ö –≤ Bank, —É–±–µ–∂–¥–∞—è—Å—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ —É –ª–∏–¥–µ—Ä–∞.

–≠—Ç–æ –∏ –µ—Å—Ç—å ¬´–∫–æ–Ω—Å–µ–Ω—Å—É—Å¬ª: –µ—Å–ª–∏ –≤—Å–µ —á–µ—Å—Ç–Ω—ã–µ —É–∑–ª—ã, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—è ledger, –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å–µ—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.

"""




from __future__ import annotations
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.responses import ORJSONResponse
from typing import Dict, Any
import hashlib
import time
import os
from collections import deque


# --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ –∂—É—Ä–Ω–∞–ª–∞ ---
ENTRY_TICKS = max(1, int(os.getenv("ENTRY_TICKS", "4")))
# –∫–∞–∂–¥—ã–µ N —Ç–∏–∫–æ–≤ PoH —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Entry (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4)

SLOT_TICKS  = max(1, int(os.getenv("SLOT_TICKS",  "12")))   
# –∫–∞–∂–¥—ã–µ N —Ç–∏–∫–æ–≤ –∑–∞–∫—Ä—ã–≤–∞–µ–º Slot –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ ledger (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)

MAX_SLOTS   = max(1, int(os.getenv("MAX_SLOTS",  "256")))    
# –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ (/ledger)

# --- –∑–∞—â–∏—Ç–∞ –æ—Ç stale hash –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ ---
RECENT_HASH_WINDOW = max(1, int(os.getenv("RECENT_HASH_WINDOW", "32")))
# –ø—Ä–∏–Ω–∏–º–∞–µ–º transfer, –µ—Å–ª–∏ recent_hash –≤—Ö–æ–¥–∏—Ç –≤ K –ø–æ—Å–ª–µ–¥–Ω–∏—Ö PoH-—Ö—ç—à–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 32)

SIG_CACHE_MAX      = max(1, int(os.getenv("SIG_CACHE_MAX", "4096")))
# anti-replay: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ M sig, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –ø–æ–¥–ø–∏—Å—å –¥–≤–∞–∂–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096)


# --- Ed25519 (–º—è–≥–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å) ---
try:
    from nacl.signing import VerifyKey
    from nacl.exceptions import BadSignatureError
except Exception:  # pragma: no cover
    VerifyKey = None  # type: ignore
    BadSignatureError = Exception  # type: ignore


# ---------- PoH: –ø—Ä–æ—Å—Ç—ã–µ "—á–∞—Å—ã" ----------
def _sha256(b: bytes) -> bytes:
    return hashlib.sha256(b).digest()

def _is_hex(s: str) -> bool:
    try: bytes.fromhex(s); return True
    except ValueError: return False

def _check_keys(from_pk: str, to_pk: str, sig_hex: str) -> None:
    if len(from_pk) != 64 or not _is_hex(from_pk):
        raise HTTPException(status_code=400, detail="bad 'from' pubkey (hex32)")
    if len(to_pk) != 64 or not _is_hex(to_pk):
        raise HTTPException(status_code=400, detail="bad 'to' pubkey (hex32)")
    if not _is_hex(sig_hex) or len(sig_hex) != 128:
        raise HTTPException(status_code=400, detail="bad 'sig' (hex64)")

def _check_recent_hash(rh: str) -> None:
    if len(rh) != 64 or not _is_hex(rh):
        raise HTTPException(status_code=400, detail="bad 'recent_hash' (hex32)")


class PoH:
    """–ú–∏–Ω–∏-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Proof of History: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ sha256-—Ç–∏–∫–∏."""
    def __init__(self, seed: bytes) -> None:
        self._cur = hashlib.sha256(seed).digest()
        self._height = 0

    def step(self, n: int = 1) -> None:
        for _ in range(n):
            self._cur = _sha256(self._cur)
        self._height += n

    def snapshot(self) -> dict:
        return {"height": self._height, "hash": self._cur.hex()}

# ---------- Bank: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ ----------
class Bank:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π ¬´–±–∞–Ω–∫¬ª: —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–æ–≤ pubkey -> amount."""
    def __init__(self) -> None:
        self._balances: Dict[str, int] = {}

    def airdrop(self, pubkey: str, amount: int) -> None:
        if amount <= 0:
            raise ValueError("amount must be > 0")
        self._balances[pubkey] = self._balances.get(pubkey, 0) + amount

    def transfer(self, from_pk: str, to_pk: str, amount: int) -> None:
        """–ü–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π: —Å–ø–∏—Å–∞—Ç—å —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é."""
        if amount <= 0:
            raise ValueError("amount must be > 0")
        if from_pk == to_pk:
            return  # no-op
        bal = self._balances.get(from_pk, 0)
        if bal < amount:
            raise ValueError("insufficient funds")
        self._balances[from_pk] = bal - amount
        self._balances[to_pk] = self._balances.get(to_pk, 0) + amount

    def balances(self) -> Dict[str, int]:
        return dict(self._balances)

# –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ (—Ç–æ, —á—Ç–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∞–º–∏ –ø–æ –∫–ª—é—á–∞–º)
def _canon_tx_bytes(from_hex: str, to_hex: str, amount: int, recent_hash: str) -> bytes:
    # –ö–∞–Ω–æ–Ω–∏—á–Ω—ã–π JSON –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–µ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    return (
        "{"
        f"\"from\":\"{from_hex}\","
        f"\"to\":\"{to_hex}\","
        f"\"amount\":{amount},"
        f"\"recent_hash\":\"{recent_hash}\""
        "}"
    ).encode("utf-8")


def build_app(role: str | None = None) -> FastAPI:
    state: Dict[str, Any] = {"role": (role or "leader")}

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PoH –∏ Bank –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        SEED = os.getenv("POH_SEED", "genesis-seed").encode()
        state["poh"] = PoH(seed=SEED)
        state["bank"] = Bank()
        # –∂—É—Ä–Ω–∞–ª —Å–ª–æ—Ç–æ–≤/—ç–Ω—Ç—Ä–∏ (—Ç–æ–ª—å–∫–æ —É –ª–∏–¥–µ—Ä–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è)
        state["slots"] = []              # —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤: [{"slot", "started_ms", "entries": [...]}]
        state["cur_slot"] = None         # —Ç–µ–∫—É—â–∏–π –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Å–ª–æ—Ç
        state["ticks_in_slot"] = 0       # —Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—Ç–∞
        state["ticks_since_entry"] = 0   # —Ç–∏–∫–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ entry
        state["pending_txs"] = []        # –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ) tx –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ entry
        state["pending_sys"] = []
        state["slot_seq"] = 0            # –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)

        # —Å—Ç–∞—Ä—Ç—É–µ–º –æ–∫–Ω–æ recent_hash
        initial_hash = state["poh"].snapshot()["hash"]
        state["recent_hashes"] = deque([initial_hash], maxlen=RECENT_HASH_WINDOW)
        # –∫—ç—à —Å–∏–≥–Ω–∞—Ç—É—Ä (anti-replay)
        state["sig_seen_set"] = set()
        state["sig_seen_q"]   = deque()


        yield
        # —Ç—É—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ

    app = FastAPI(
        title="Solana TDD ‚Äî step3",
        default_response_class=ORJSONResponse,
        lifespan=lifespan,
    )

    def _ensure_slot_started():
        if state["cur_slot"] is None:
            state["cur_slot"] = {
                "slot": state["slot_seq"],
                "started_ms": int(time.time() * 1000),
                "entries": []
            }
            state["ticks_in_slot"] = 0
            state["ticks_since_entry"] = 0

    def _flush_entry_if_needed():
        if state["ticks_since_entry"] >= ENTRY_TICKS and state["cur_slot"] is not None:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º entry —Å —Ç–µ–∫—É—â–∏–º hash –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            poh: PoH = state["poh"]
            entry = {
                "num_hashes": state["ticks_since_entry"],
                "hash": poh.snapshot()["hash"],
                "transactions": list(state["pending_txs"])  # –∫–æ–ø–∏—è
            }
            #  ‚¨áÔ∏è –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ‚Äî –ø–æ–ª–æ–∂–∏–º –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á "system"
            if state["pending_sys"]:
                entry["system"] = list(state["pending_sys"])
                state["pending_sys"].clear()
            state["cur_slot"]["entries"].append(entry)
            state["pending_txs"].clear()
            state["ticks_since_entry"] = 0

    def _flush_slot_if_needed():
        if state["ticks_in_slot"] >= SLOT_TICKS and state["cur_slot"] is not None:
            # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            state["slots"].append(state["cur_slot"])
            if len(state["slots"]) > MAX_SLOTS:
                state["slots"] = state["slots"][-MAX_SLOTS:]
            state["slot_seq"] += 1
            state["cur_slot"] = None  # —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ –∑–∞–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—ã–π —Å–ª–æ—Ç


    @app.get("/health", response_model=dict)
    async def health() -> dict:
        return {"ok": True}

    @app.get("/poh", response_model=dict)
    async def get_poh() -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–Ω–∏–º–æ–∫ PoH –∏ —Ç–∏–∫–∞–µ—Ç –Ω–∞ 1 —à–∞–≥. –í leader-—Ä–µ–∂–∏–º–µ —Å–æ–±–∏—Ä–∞–µ—Ç entries/slots."""
        poh: PoH = state["poh"]
        # —Ç–∏–∫
        poh.step(1)

        snap = poh.snapshot()
        state["recent_hashes"].append(snap["hash"])

        # –µ—Å–ª–∏ –ª–∏–¥–µ—Ä ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if state["role"] == "leader":
            _ensure_slot_started()
            state["ticks_in_slot"] += 1
            state["ticks_since_entry"] += 1
            _flush_entry_if_needed()
            _flush_slot_if_needed()

        # slot –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã–π)
        cur_slot_no = (
            state["cur_slot"]["slot"] if (state["role"] == "leader" and state["cur_slot"] is not None)
            else max(state["slot_seq"] - 1, 0)
        )

        return {"height": snap["height"], "hash": snap["hash"], "slot": cur_slot_no}


    # ---------- –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–π–Ω—Ç—ã ----------
    @app.post("/airdrop", response_model=dict)
    async def post_airdrop(req: Dict[str, Any]) -> dict:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å amount –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π pubkey (faucet –¥–ª—è —Ç–µ—Å—Ç–æ–≤)."""
        pubkey = str(req.get("pubkey", "")).lower()
        amount = int(req.get("amount", 0))
        try:
            state["bank"].airdrop(pubkey, amount)
        except ValueError as e:
            raise HTTPException(status_code=400, detail=str(e))
        
        # —Å—Ç–∞–ª–æ: –∫–ª–∞–¥—ë–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä
        state["pending_sys"].append({
            "type": "airdrop",
            "to": pubkey,
            "amount": amount
        })
        return {"ok": True}

    @app.get("/bank", response_model=dict)
    async def get_bank() -> dict:
        balances = state["bank"].balances()
        return {"balances": balances, "total_supply": sum(balances.values())}

    
    @app.post("/transfer", response_model=dict)
    async def post_transfer(req: Dict[str, Any]) -> dict:
        from_pk = str(req.get("from", "")).lower()
        to_pk   = str(req.get("to", "")).lower()
        amount  = int(req.get("amount", 0))
        recent  = str(req.get("recent_hash", "")).lower()
        sig_hex = str(req.get("sig", "")).lower()

        if not from_pk or not to_pk or amount <= 0 or not recent or not sig_hex:
            raise HTTPException(status_code=400, detail="missing or invalid fields (from,to,amount,recent_hash,sig)")

        _check_keys(from_pk, to_pk, sig_hex)
        _check_recent_hash(recent)

        # recent_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö K –∑–Ω–∞—á–µ–Ω–∏–π
        if recent not in state["recent_hashes"]:
            raise HTTPException(status_code=400, detail="stale recent_hash")

        # anti-replay
        if sig_hex in state["sig_seen_set"]:
            raise HTTPException(status_code=400, detail="duplicate signature")

        if VerifyKey is None:
            raise HTTPException(status_code=500, detail="PyNaCl (Ed25519) not installed")
        try:
            msg = _canon_tx_bytes(from_pk, to_pk, amount, recent)
            VerifyKey(bytes.fromhex(from_pk)).verify(msg, bytes.fromhex(sig_hex))
        except BadSignatureError:
            raise HTTPException(status_code=400, detail="bad signature")
        except ValueError:
            raise HTTPException(status_code=400, detail="bad key or signature encoding")

        try:
            state["bank"].transfer(from_pk, to_pk, amount)
        except ValueError as e:
            raise HTTPException(status_code=400, detail=str(e))

        # 1) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å sig –≤ anti-replay –∫—ç—à–µ
        state["sig_seen_set"].add(sig_hex)
        state["sig_seen_q"].append(sig_hex)
        if len(state["sig_seen_q"]) > SIG_CACHE_MAX:
            old = state["sig_seen_q"].popleft()
            state["sig_seen_set"].discard(old)

        # 2) –∑–∞—Ç–µ–º –±—É—Ñ–µ—Ä–∏–∑—É–µ–º tx –≤ entry
        state["pending_txs"].append({
            "from": from_pk, "to": to_pk, "amount": amount,
            "recent_hash": recent, "sig": sig_hex
        })

        return {"ok": True}


    @app.get("/ledger", response_model=dict)
    async def get_ledger() -> dict:
        """–û—Ç–¥–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã (leader)."""
        slots = list(state["slots"])
        # –µ—Å–ª–∏ —Å–ª–æ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –∏ –µ–≥–æ (–≤ —Ç–µ—Å—Ç–∞—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö)
        if state["role"] == "leader":
            cur = state["cur_slot"]
            if cur is not None and cur["entries"]:
                slots = slots + [cur]
        return {"slots": slots}

    @app.post("/ingest", response_model=dict)
    async def post_ingest(payload: Dict[str, Any]) -> dict:
        """–í–∞–ª–∏–¥–∞—Ç–æ—Ä—Å–∫–∏–π —Ä–µ–∂–∏–º: –ø—Ä–∏–Ω—è—Ç—å —Å–ª–æ—Ç—ã –ª–∏–¥–µ—Ä–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å PoH –∏ –ø–æ–¥–ø–∏—Å–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç—å replay."""
        slots = payload.get("slots")
        if not isinstance(slots, list):
            raise HTTPException(status_code=400, detail="invalid payload: slots[] required")


        poh: PoH = state["poh"]
        bank: Bank = state["bank"]

        for sl in slots:
            entries = sl.get("entries", [])
            if not isinstance(entries, list):
                raise HTTPException(status_code=400, detail="invalid slot: entries[] required")

            for e_idx, e in enumerate(entries):
                # 1) –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º PoH: —Å–¥–µ–ª–∞—Ç—å num_hashes —à–∞–≥–æ–≤ –∏ —Å–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π hash
                try:
                    nh = int(e["num_hashes"])
                    want_hash = str(e["hash"])
                except Exception:
                    raise HTTPException(status_code=400, detail="invalid entry format")

                poh.step(nh)
                got = poh.snapshot()["hash"]
                if got != want_hash:
                                raise HTTPException(
                                    status_code=400,
                                    detail=f"poh mismatch at slot={sl.get('slot')} entry_index={e_idx}"
                                )   

                # 2a) —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π)
                sys_events = e.get("system", [])
                if not isinstance(sys_events, list):
                    raise HTTPException(status_code=400, detail="invalid entry: system[]")

                for ev in sys_events:
                    if ev.get("type") == "airdrop":
                        try:
                            to_acct = str(ev["to"])
                            amt = int(ev["amount"])
                        except Exception:
                            raise HTTPException(status_code=400, detail="bad airdrop fields in ingest")
                        try:
                            bank.airdrop(to_acct, amt)
                        except ValueError as ex:
                            raise HTTPException(status_code=400, detail=f"bank error: {ex}")
                    else:
                        raise HTTPException(status_code=400, detail=f"unknown system event: {ev.get('type')}")


                # 2b) –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                txs = e.get("transactions", [])
                if not isinstance(txs, list):
                    raise HTTPException(status_code=400, detail="invalid entry: transactions[]")

                for tx in txs:
                    # ‚¨áÔ∏è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è AIRDROP (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)
                    if tx.get("type") == "airdrop":
                        try:
                            to_acct = str(tx["to"])
                            amt = int(tx["amount"])
                        except Exception:
                            raise HTTPException(status_code=400, detail="bad airdrop fields in ingest")
                        try:
                            bank.airdrop(to_acct, amt)
                        except ValueError as e:
                            raise HTTPException(status_code=400, detail=f"bank error: {e}")
                        continue  # –∫ —Å–ª–µ–¥—É—é—â–µ–π tx

                    # ‚¨áÔ∏è –æ–±—ã—á–Ω—ã–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π TRANSFER (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
                    try:
                        frm = str(tx["from"]); to = str(tx["to"])
                        amt = int(tx["amount"])
                        rh  = str(tx["recent_hash"])
                        sig_hex = str(tx["sig"])
                    except Exception:
                        raise HTTPException(status_code=400, detail="bad tx fields")

                    # —Å–≤–µ–∂–µ—Å—Ç—å recent_hash: –≤ —Ä–µ–∂–∏–º–µ ingest –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —É–∂–µ —à–∞–≥–Ω—É–ª PoH –∏ –æ–∂–∏–¥–∞–µ—Ç,
                    # —á—Ç–æ recent_hash –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ü–µ–ø–æ—á–∫–µ –ª–∏–¥–µ—Ä–∞; –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–º—è–≥—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ.
                    # –ú—ã –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ (PoH —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å).
                    if VerifyKey is None:
                        raise HTTPException(status_code=500, detail="PyNaCl (Ed25519) not installed")
                    try:
                        msg = _canon_tx_bytes(frm, to, amt, rh)
                        VerifyKey(bytes.fromhex(frm)).verify(msg, bytes.fromhex(sig_hex))
                    except BadSignatureError:
                        raise HTTPException(status_code=400, detail="bad signature in ingest")
                    except ValueError:
                        raise HTTPException(status_code=400, detail="bad key or signature encoding in ingest")

                    try:
                        bank.transfer(frm, to, amt)
                    except ValueError as e:
                        raise HTTPException(status_code=400, detail=f"bank error: {e}")

        # –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ¬´–∂—É—Ä–Ω–∞–ª¬ª –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
        return {"ok": True}

    @app.get("/config", response_model=dict)
    async def get_config() -> dict:
        return {
            "ENTRY_TICKS": ENTRY_TICKS,
            "SLOT_TICKS": SLOT_TICKS,
            "MAX_SLOTS": MAX_SLOTS,
            "RECENT_HASH_WINDOW": RECENT_HASH_WINDOW,
            "SIG_CACHE_MAX": SIG_CACHE_MAX,
            "ROLE": state["role"],
        }
    
    return app

# –¥–ª—è fastapi dev app/main.py
app = build_app(role="leader")
